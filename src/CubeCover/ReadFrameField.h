// =============================================================================
// This file contains code derived from the following source(s):
//   Original Repository: https://github.com/the13fools/Mint3D
//   Original File Path:  /src/CubeCover/ReadFrameField.h
//   Original License:    Mozilla Public License 2.0 (MPL-2.0)
//
// Copyright (c) 2025 Josh Vekhter
// -----------------------------------------------------------------------------
// Modifications made by Canjia Huang on 2025-8-1:
//   - Adjusted code formatting in selected sections
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.
// =============================================================================

#ifndef READFRAMEFIELD_H
#define READFRAMEFIELD_H

#include <Eigen/Core>

namespace CubeCover {
/*
 * Reads the frame field from a .fra file, and optionally, the local
 * assignments from a .perm file. (If the permFilename is empty,
 * sets all local assignments to the identity.)
 * The |T| x 4 matrix of tetrahedral vertex indices T must be provided
 * (and readFrameField will check that the data being read from the
 * .fra and .perm files is consistent with the combinatorics of the tet
 * mesh).
 * On success, the data structures frames and assignments are populated with
 * data in the same format as expected by core() (and can be passed
 * directly in).
 *
 * Returns false if there are problems reading or parsing the input (set
 * verbose to true for diagnostic information on the console).
 */
bool readFrameField(const std::string& fraFilename, const std::string& permFilename, const Eigen::MatrixXi& T,
                    Eigen::MatrixXd& frames, Eigen::MatrixXi& assignments, bool verbose = false);

bool readFrameField_v1(const std::string& fraFilename, const std::string& permFilename, const Eigen::MatrixXi& T,
                       Eigen::MatrixXd& frames, Eigen::MatrixXi& assignments, bool verbose = false);

bool readFrameField_v2(const std::string& fraFilename, const std::string& permFilename, const Eigen::MatrixXi& T,
                       Eigen::MatrixXd& frames, Eigen::MatrixXi& assignments, bool verbose = false);

bool readFrameField_ofs(const std::string& fraFilename, Eigen::MatrixXd& frames);

/*
 * Load a mesh generated by MetricDrivenFrame3D for processing.
 */
bool deserializeFF3FramesFromMetricDrivenFrames3D(Eigen::MatrixXd& mat, const std::string& filepath);

};   // namespace core

#endif